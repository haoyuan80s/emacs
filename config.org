* AAA-Basic
#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines nil)
  (setq-default cursor-type 'box)
  (blink-cursor-mode 0)
  (setq-default mac-option-modifier 'meta)
  (setq-default frame-title-format "%b (%f)")
  (setq shift-select-mode 1)
  (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))
  (setq org-src-tab-acts-natively t)
  (setq recenter-redisplay nil)
  (setq scroll-conservatively 100)
  (setq visible-bell nil)
  (setq ring-bell-function #'ignore)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq create-lockfiles nil)
  (scroll-bar-mode -1)
  (save-place-mode 1)
  (savehist-mode t)
  (setq save-place-file (concat user-emacs-directory "places"))
  (add-hook 'prog-mode-hook  'hl-line-mode)
  (delete-selection-mode 1)
  (setq inhibit-startup-message t)
  (setq ;; makes killing/yanking interact with the clipboard
    x-select-enable-clipboard t
    ;; Save clipboard strings into kill ring before replacing them.
    ;; When one selects something in another program to paste it into Emacs,
    ;; but kills something in Emacs before actually pasting it,
    ;; this selection is gone unless this variable is non-nil
    save-interprogram-paste-before-kill t
    ;; Shows all options when running apropos. For more info,
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
    apropos-do-all t
    ;; Mouse yank commands yank at point instead of at click.
    mouse-yank-at-point t)
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
  (setq auto-save-default nil)
  (defun toggle-comment-on-line ()
    "comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  ;; (global-set-key (kbd "C-;") 'toggle-comment-on-line)
  (use-package emacs
    :config
    (defun yh/multi-line-next ()
      (interactive)
      (next-line 10))

    (defun yh/multi-line-prev ()
      (interactive)
      (previous-line 10))
    :bind (("M-n" . yh/multi-line-next)
           ("M-p" . yh/multi-line-prev)))
  (set-face-attribute 'default nil
                      :family  "Hack"
                      :height 150
                      :weight 'normal
                      :width 'normal)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (server-start)
  (defun pwd ()
    "Show the full path file name in the minibuffer and copy it."
    (interactive)
    (kill-new (buffer-file-name))
    (message (buffer-file-name)))
  (global-set-key (kbd "C-z") nil)
  ;; (global-set-key (kbd "C-c n") 'next-buffer)
  ;; (global-set-key (kbd "C-c p") 'previous-buffer)
  (global-set-key (kbd "C-x C-z") nil)
  (global-set-key (kbd "C-c R") 'revert-buffer)
  (setq sh-basic-offset 4)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (setq-default indent-tabs-mode nil)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC

* ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :demand
    :ensure t
    :bind
    ("C-x o" . ace-window)
    :custom (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :config
    (set-face-attribute
     'aw-leading-char-face nil
       :foreground "deep sky blue"
       :weight 'bold
       :height 2.0
       ))
#+end_src

* amx
#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    :config
    (amx-mode 1))
#+end_src

* anzu
#+begin_src emacs-lisp
  (use-package anzu
    :disabled
    :ensure t
    :bind ("M-s q" . anzu-query-replace))
#+end_src

* async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :custom
    (async-shell-command-display-buffer t)
    :bind
    ("M-!" . async-shell-command)
    :init
    (autoload 'dired-async-mode "dired-async.el" nil t)
    (dired-async-mode 1)
    (async-bytecomp-package-mode 1))
    #+end_src
* Auto-update
  #+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
      :ensure t
      :custom
      (auto-package-update-delete-old-versions t)
      (auto-package-update-hide-results nil)
      (auto-package-update-interval 2)
      (auto-package-update-prompt-before-update t)
      :config
      (auto-package-update-maybe))
  #+END_SRC

* avy
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind
      ("C-:" . avy-goto-word-1)
      ("C-S-l" . avy-goto-line))
  #+end_src

* COMMENT awesome-tab
  #+begin_src emacs-lisp
    (use-package awesome-tab
      ;; :disabled
      :load-path "/Users/yuanha/.emacs.d/awesome-tab"
      ;; :ensure nil
      :custom
      (awesome-tab-height 150)
      (awesome-tab-active-bar-height 14)
      (awesome-tab-show-tab-index nil)
      (awesome-tab-ace-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      :bind
      ("C-c t" . awesome-fast-switch/body)
      :config
      (awesome-tab-mode t))
      (require 'awesome-tab)




    (defun awesome-tab-buffer-groups ()
      "`awesome-tab-buffer-groups' control buffers' group rules.

    Group awesome-tab with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `awesome-tab-get-group-name' with project name."
      (list
       (cond
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'eshell-mode)
         "EShell")
        ((derived-mode-p 'emacs-lisp-mode)
         "Elisp")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(org-mode org-agenda-mode diary-mode))
         "OrgMode")
        (t
         (awesome-tab-get-group-name (current-buffer))))))

    (defhydra awesome-fast-switch (:hint nil)
      "
     ^^^^Fast Move             ^^^^Tab                    ^^Search            ^^Misc
    -^^^^--------------------+-^^^^---------------------+-^^----------------+-^^---------------------------
       ^_k_^   prev group    | _C-a_^^     select first | _b_ search buffer | _C-k_   kill buffer
     _h_   _l_  switch tab   | _C-e_^^     select last  | _g_ search group  | _C-S-k_ kill others in group
       ^_j_^   next group    | _C-j_^^     ace jump     | ^^                | ^^
     ^^0 ~ 9^^ select window | _C-h_/_C-l_ move current | ^^                | ^^
    -^^^^--------------------+-^^^^---------------------+-^^----------------+-^^---------------------------
    "
      ("h" awesome-tab-backward-tab)
      ("j" awesome-tab-forward-group)
      ("k" awesome-tab-backward-group)
      ("l" awesome-tab-forward-tab)
      ("0" my-select-window)
      ("1" my-select-window)
      ("2" my-select-window)
      ("3" my-select-window)
      ("4" my-select-window)
      ("5" my-select-window)
      ("6" my-select-window)
      ("7" my-select-window)
      ("8" my-select-window)
      ("9" my-select-window)
      ("C-a" awesome-tab-select-beg-tab)
      ("C-e" awesome-tab-select-end-tab)
      ("C-j" awesome-tab-ace-jump)
      ("C-h" awesome-tab-move-current-tab-to-left)
      ("C-l" awesome-tab-move-current-tab-to-right)
      ("b" ivy-switch-buffer)
      ("g" awesome-tab-counsel-switch-group)
      ("C-k" kill-current-buffer)
      ("C-S-k" awesome-tab-kill-other-buffers-in-current-group)
      ("q" nil "quit"))


    (global-set-key (kbd "s-M-h") 'awesome-tab-backward-tab)
    (global-set-key (kbd "s-M-j") 'awesome-tab-forward-group)
    (global-set-key (kbd "s-M-k") 'awesome-tab-backward-group)
    (global-set-key (kbd "s-M-l") 'awesome-tab-forward-tab)

    (global-set-key (kbd "s-1") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-2") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-3") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-4") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-5") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-6") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-7") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-8") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-9") 'awesome-tab-select-visible-tab)
    (global-set-key (kbd "s-0") 'awesome-tab-select-visible-tab)
  #+end_src

* COMMENT Beacon
  #+begin_src emacs-lisp
    (use-package beacon
      :disabled
      :demand
      :custom
      (beacon-blink-when-window-scrolls nil)
      :config
      (beacon-mode))
  #+end_src

* buffers
  #+BEGIN_SRC emacs-lisp
     (defun kill-curr-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-curr-buffer)
     (global-set-key (kbd "C-x K") 'kill-buffer)
  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :init
      ;; disable confirmation for killing unmodified buffers
      (setq ibuffer-expert t)

      ;; sort buffers by name
      (setq-default ibuffer-default-sorting-mode 'filename/process)

      ;; hide empty filter groups
      (setq ibuffer-show-empty-filter-groups nil)

      ;; use ibuffer
      :bind
      ("C-x C-b" . ibuffer)
      )

    (use-package ibuffer-vc
      :ensure t
      :after ibuffer
      ;; group ibuffer by repository root
      :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
      ;; :bind (:map ibuffer-mode-map
      ;;             ;; g updates both buffers and repository groups
      ;;             ("g" . ibuffer-vc-set-filter-groups-by-vc-root))
      )

    (setq ibuffer-filter-group-name-face 'font-lock-doc-face)
  #+END_SRC
* Clojure
  #+BEGIN_SRC emacs-lisp
    ;; First install the package:
    ;; (use-package flycheck-clj-kondo
    ;;   :ensure t)
    (use-package flycheck-joker)

    ;; then install the checker as soon as `clojure-mode' is loaded
    (use-package clojure-snippets
      :defer t
      :ensure t)

    (use-package clojure-mode
      :ensure t
      :config
      ;; (add-hook 'clojure-mode-hook #'paredit-mode)
      (add-hook 'clojure-mode-hook #'subword-mode)
      (setq inferior-lisp-program "lein repl"))


    (use-package cider
      :ensure t
      :bind
      (:map clojure-mode-map
            ("C-c b" . 'cider-eval-buffer)
            ("C-c f" . 'cider-format-buffer))
      (:map cider-repl-mode-map
            ("M-," . 'cider-repl-handle-shortcut)
            ("C-," . 'cider-repl-handle-shortcut))
      :defer t
      :config
      (setq cider-repl-wrap-history t)
      (setq cider-completion-annotations-include-ns 'always)
      (setq cider-repl-history-file "~/.emacs.d/cider-history")
      (add-hook 'cider-repl-mode-hook #'eldoc-mode)
      (add-hook 'cider-mode-hook #'eldoc-mode))

    (use-package flycheck-joker
      :disabled
      :ensure t)

    ;; (use-package flycheck-clojure
    ;;   :defer t
    ;;   :commands (flycheck-clojure-setup)               ;; autoload
    ;;   :config
    ;;   (eval-after-load 'flycheck
    ;;     '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
    ;;   (add-hook 'after-init-hook #'global-flycheck-mode))
  #+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :bind
      ("M-<tab>"   . company-complete)
      :ensure t
      :custom
      ;; (company-global-modes '(not  eshell-mode )) ;org-mode inferior-python-mode
      (company-show-numbers 'left)
      (company-idle-delay 0.5)
      (company-minimum-prefix-length 1)
      (company-tooltip-align-annotations t)
      ;; (company-require-match 'never)
      (company-dabbrev-downcase nil)
      (company-auto-complete 'nil)
      (company-selection-wrap-around t)
      (company-tooltip-limit 10)
      (company-tooltip-maximum-width most-positive-fixnum) ; 60
      :config
      (add-hook 'org-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends)
                               'company-ispell)))
      (add-hook 'text-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends)
                               'company-ispell)))
      (global-company-mode))

    (with-eval-after-load 'company
      (define-key company-active-map (kbd "<return>") nil)
      (define-key company-active-map (kbd "RET") nil)
      (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
      (define-key company-active-map (kbd "M-<tab>") #'company-complete-selection))
    (add-to-list 'completion-styles 'flex)
  #+END_SRC

* config edit/reload
  #+BEGIN_SRC emacs-lisp
    (defun config-edit ()
      (interactive)
      (find-file "~/.emacs.d/config.org"))

    (defun config-edit-init ()
      (interactive)
      (find-file "~/.emacs.d/init.el"))

    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

    (global-set-key (kbd "C-c i r") 'config-reload)
    (global-set-key (kbd "C-c i i") 'config-edit)
    (global-set-key (kbd "C-c i I") 'config-edit-init)

  #+END_SRC

* crux
  #+begin_src emacs-lisp
    (use-package crux
      :bind
      ("C-c r" . 'crux-rename-file-and-buffer)
      ("C-c K" . 'crux-kill-other-buffers)
      ;; ("C-k" . 'crux-smart-kill-line)
      ("C-c k" . 'crux-delete-buffer-and-file)
      ("C-<return>" . 'crux-smart-open-line)
      ("C-S-<return>" . 'crux-smart-open-line-above)
      ("C-<backspace>" . 'crux-kill-line-backwards)     
      ;; ([(meta shift o)] . 'crux-smart-open-line-above)
      ("C-c d" . 'crux-duplicate-current-line-or-region)
      ("C-c D" . 'crux-duplicate-and-comment-current-line-or-region)
      ("C-c f" . 'crux-cleanup-buffer-or-region)
      ("C-c o" . crux-open-with))
    (global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
  #+end_src

* csv-mode
#+begin_src emacs-lisp
  (use-package csv-mode
    :config
    (add-hook 'csv-mode-hook 'csv-highlight))

  (defun csv-highlight (&optional separator)
    (interactive (list (when current-prefix-arg (read-char "Separator: "))))
    (font-lock-mode 1)
    (let* ((separator (or separator ?\,))
           (n (count-matches (string separator) (point-at-bol) (point-at-eol)))
           (colors (cl-loop for i from 0 to 1.0 by (/ 2.0 n)
                         collect (apply #'color-rgb-to-hex 
                                        (color-hsl-to-rgb i 0.3 0.5)))))
      (cl-loop for i from 2 to n by 2
            for c in colors
            for r = (format "^\\([^%c\n]+%c\\)\\{%d\\}" separator separator i)
            do (font-lock-add-keywords nil `((,r (1 '(face (:foreground ,c)))))))))

  ;; (defun csv-highlight (&optional separator)
  ;;   (interactive (list (when current-prefix-arg (read-char "Separator: "))))
  ;;   (font-lock-mode 1)
  ;;   (let* ((separator (or separator ?\,))
  ;;          (n (count-matches (string separator) (point-at-bol) (point-at-eol)))
  ;;          (colors (loop for i from 0 to 1.0 by (/ 2.0 n)
  ;;                        collect (apply #'color-rgb-to-hex 
  ;;                                       (color-hsl-to-rgb i 0.3 0.5)))))
  ;;     (setq i 0)
  ;;     (while (< i n)
  ;;       (dolist (c colors)
  ;;         (let ((r (format "^\\([^%c\n]+%c\\)\\{%d\\}" separator separator i)))
  ;;           (font-lock-add-keywords nil `((,r (1 '(face (:foreground ,c))))))))
  ;;         (setq i (+ i 2)))))


  ;; ;; (defun my-csv-mode-hook ()
  ;; ;;   (csv-highlight 15))

  ;; (add-hook 'csv-mode-hook 'csv-highlight)
#+end_src

* dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :demand
      :custom
      (dashboard-items '((recents  . 15)
                         (bookmarks . 3)
                         (projects . 5)))
      (dashboard-set-file-icons t)
      (dashboard-set-heading-icons t)
      (dashboard-banner-logo-title "")
      :config
      (dashboard-setup-startup-hook)
      )
  #+END_SRC

* Dired
  #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :custom
      (dired-auto-revert-buffer t)
      :hook
      (dired-mode . (lambda ()
		      (local-set-key (kbd "j") #'dired-find-alternate-file)
		      (local-set-key (kbd "C-j") #'dired-find-alternate-file)
		      (local-set-key (kbd "U")
				     (lambda () (interactive) (find-alternate-file "..")))))
      )
    (put 'dired-find-alternate-file 'disabled nil)
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
  #+end_src

* Dmenu
  #+BEGIN_SRC emacs-lisp
    (use-package dmenu
      :defer t
      :ensure t)
  #+END_SRC

* doom-themes
  #+begin_src emacs-lisp
    (use-package doom-themes
      :demand
      :ensure
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      ;; Enable flashing mode-line on errors
      ;; (doom-themes-visual-bell-config)
      ;; Enable custom neotree theme (all-the-icons must be installed!)
      ;; (doom-themes-neotree-config)
      ;; or for treemacs users
      ;; (setq doom-themes-treemacs-theme "doom-atoms") ; use the colorful treemacs theme
      ;; (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      ;; (doom-themes-org-config)
      )

    (use-package doom-modeline
      :demand
      :init (doom-modeline-mode 1))

    (doom-modeline-def-modeline 'my-simple-line
      '(bar matches buffer-info remote-host buffer-position parrot selection-info)
      '(minor-modes input-method buffer-encoding major-mode process vcs checker))

    ;; Add to `doom-modeline-mode-hook` or other hooks
    (defun setup-custom-doom-modeline ()
       (doom-modeline-set-modeline 'my-simple-line 'default))
    (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)

    (use-package all-the-icons :ensure t)

    (use-package modus-vivendi-theme
      :init
      (setq modus-vivendi-theme-slanted-constructs t
            modus-vivendi-theme-bold-constructs t
            modus-vivendi-theme-fringes 'nil ; {nil,'subtle,'intense}
            modus-vivendi-theme-3d-modeline nil
            modus-vivendi-theme-faint-syntax nil
            modus-vivendi-theme-intense-hl-line nil
            modus-vivendi-theme-intense-paren-match nil
            modus-vivendi-theme-prompts 'subtle ; {nil,'subtle,'intense}
            modus-vivendi-theme-completions 'moderate ; {nil,'moderate,'opinionated}
            modus-vivendi-theme-diffs 'desaturated ; {nil,'desaturated,'fg-only}
            modus-vivendi-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
            modus-vivendi-theme-variable-pitch-headings t
            modus-vivendi-theme-rainbow-headings t
            modus-vivendi-theme-section-headings nil
            modus-vivendi-theme-scale-headings nil
            ;; modus-vivendi-theme-scale-1 1.05
            ;; modus-vivendi-theme-scale-2 1.1
            ;; modus-vivendi-theme-scale-3 1.15
            ;; modus-vivendi-theme-scale-4 1.2
            ;; modus-vivendi-theme-scale-5 1.3

            )
      )

    (use-package modus-operandi-theme
      :init
      (setq modus-operandi-theme-slanted-constructs t
            modus-operandi-theme-bold-constructs t
            modus-operandi-theme-fringes 'nil ; {nil,'subtle,'intense}
            modus-operandi-theme-3d-modeline nil
            modus-operandi-theme-faint-syntax nil
            modus-operandi-theme-intense-hl-line nil
            modus-operandi-theme-intense-paren-match nil
            modus-operandi-theme-prompts 'subtle ; {nil,'subtle,'intense}
            modus-operandi-theme-completions 'moderate ; {nil,'moderate,'opinionated}
            modus-operandi-theme-diffs 'desaturated ; {nil,'desaturated,'fg-only}
            modus-operandi-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
            modus-operandi-theme-variable-pitch-headings t
            modus-operandi-theme-rainbow-headings t
            modus-operandi-theme-section-headings nil
            modus-operandi-theme-scale-headings nil
            ;; modus-operandi-theme-scale-1 1.05
            ;; modus-operandi-theme-scale-2 1.1
            ;; modus-operandi-theme-scale-3 1.15
            ;; modus-operandi-theme-scale-4 1.2
            ;; modus-operandi-theme-scale-5 1.3

            ))


    (defun light-theme ()
      "Light mode."
      (interactive)
      (load-theme 'doom-nord-light t)
      )



    (defun dark-theme ()
      "Dark mode."
      (interactive)
      (load-theme 'doom-one t)
      )

    (defun dark-nord-theme ()
      "Light mode."
      (interactive)
      (load-theme 'doom-nord t))


    ;; (load-theme 'modus-vivendi t)
    ;; (set-background-color "gray7")
    (dark-theme)
  #+end_src

* Drag
  #+begin_src emacs-lisp
    (defun move-text-internal (arg)
      (cond
       ((and mark-active transient-mark-mode)
        (if (> (point) (mark))
            (exchange-point-and-mark))
        (let ((column (current-column))
              (text (delete-and-extract-region (point) (mark))))
          (forward-line arg)
          (move-to-column column t)
          (set-mark (point))
          (insert text)
          (exchange-point-and-mark)
          (setq deactivate-mark nil)))
       (t
        (beginning-of-line)
        (when (or (> arg 0) (not (bobp)))
          (forward-line)
          (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg))
          (forward-line -1)))))

    (defun move-text-down (arg)
      "Move region (transient-mark-mode active) or current line
        arg lines down."
      (interactive "*p")
      (move-text-internal arg))

    (defun move-text-up (arg)
      "Move region (transient-mark-mode active) or current line
        arg lines up."
      (interactive "*p")
      (move-text-internal (- arg)))

    (global-set-key (kbd "C-S-n") 'move-text-down)
    (global-set-key (kbd "C-S-p") 'move-text-up)
  #+end_src

* COMMENT eglot
#+begin_src emacs-lisp
  (use-package eglot
    ;; :disabled
    :ensure t
    :after projectile
    :commands (eglot eglot-ensure)
    :custom
    ;; (eglot--highlights nil)
    (eglot-ignored-server-capabilites '(:documentHighlightProvider))

    :hook ((Shell-script . eglot-ensure)
           (go-mode . eglot-ensure)
           (python-mode . eglot-ensure)
           (web-mode . eglot-ensure)
           (js2-mode . eglot-ensure)
           (html-mode . eglot-ensure)
           (css-mode . eglot-ensure)
           (rustic-mode . eglot-ensure)


           )
  
    :bind (:map eglot-mode-map
                ("C-c e r" . eglot-rename)
                ("C-c e h" . eglot-help-at-point)
                ("C-c e a" . eglot-code-actions)
                )
    :init
    (setq eglot-autoshutdown t))

  (setq-default eglot-workspace-configuration
                '((:pyls :plugins (:jedi_completion (:fuzzy t)))))
#+end_src
* esup
  #+begin_src emacs-lisp
    (use-package esup
      :disabled
      :ensure t
      ;; To use MELPA Stable use ":pin mepla-stable",
      ;; :pin melpa
      :commands (esup))
  #+end_src

* exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
     (exec-path-from-shell-initialize))
#+end_src
* expand region
  #+begin_src emacs-lisp
    (use-package expand-region
      :ensure t
      :bind
      ("C-=" . er/expand-region)
      ("<mouse-3>" . er/expand-region)
      )
  #+end_src

* Flycheck/Flymake
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-flycheck
      (:pre (flycheck-list-errors)
            :post (quit-windows-on "*Flycheck errors*")
            :hint nil)
      ("n" flycheck-next-error "next")
      ("p" flycheck-previous-error "previous")
      ("f" flycheck-first-error "first")
      ("l" (progn (goto-char (point-max)) (flycheck-previous-error)) "last")
      ("F" flycheck-error-list-set-filter "Filter")
      ("q" nil))


    (defhydra hydra-flymake
      (:pre (flymake-show-diagnostics-buffer)
            :post (quit-windows-on (concat "*Flymake diagnostics for " (buffer-name) "*"))
            :hint nil)
      ("n" flymake-goto-next-error "next")
      ("p" flymake-goto-prev-error "previous")
      ("q" nil))

    (global-key-binding (kbd "C-!") 'hydra-flymake/body)

    (use-package flycheck
      ;; :hook (c-mode python-mode)
      ;; :disabled
      :ensure t
      ;; :hook (prog-mode . flycheck-mode)
      :custom
      (flycheck-global-modes
       '(not text-mode outline-mode fundamental-mode org-mode emacs-lisp-mode
             diff-mode shell-mode eshell-mode term-mode elisp-mode))
      ;; (flycheck-idle-change-delay 0.2)
      ;; ;; (flycheck-check-syntax-automatically '(save mode-enabled))
      ;; (flycheck-highlighting-mode 'lines)
      ;; (flycheck-checker-error-threshold 200)
      ;; (flycheck-global-modes
      ;;  '(not text-mode outline-mode fundamental-mode org-mode
      ;;         diff-mode shell-mode eshell-mode term-mode))
      :bind ("C-!" . hydra-flycheck/body)
      :config
      (global-flycheck-mode))

    (use-package flycheck-pos-tip
      :disabled
      :ensure t
      :after flycheck
      :custom
      (flycheck-pos-tip-timeout 120)
      :config
      (with-eval-after-load 'flycheck
        (flycheck-pos-tip-mode)))

    ;; (use-package flymake
    ;;   :bind ("C-!" . hydra-flymake/body))

  #+END_SRC

* format-all
  #+begin_src emacs-lisp
    (use-package  format-all
      :ensure t
      ;; :hook ((sh-mode . format-all-mode))
      ;; (yaml-mode . format-all-mode))
      ;; (elisp-mode . format-all-mode))
      )

    (defun format-sh ()
	(interactive)
	(shell-command (concat "shfmt -s -w " (buffer-name)))
	(revert-buffer t t))


    (add-hook 'sh-mode-hook
	      (lambda ()
		(add-hook 'after-save-hook 'format-sh nil 'make-it-local)))
  #+end_src

* go
#+begin_src emacs-lisp
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (use-package go-mode
    :mode ("\\.go" . go-mode)
    :bind
    (:map go-mode-map
          ("C-c C-d" . godoc-at-point)
          ("C-c b" . dlv-current-func)
          ("C-c B" . dlv))
    ;; :config
    ;; (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
    )

  (use-package go-dlv
    :after go-mode)
#+end_src

* guru-mode
  #+begin_src emacs-lisp
    (use-package guru-mode
      :disabled)
  #+end_src

* highlight indentation
  #+begin_src emacs-lisp
    (use-package highlight-indent-guides
      :disabled t
      :ensure t
      ;; :hook (prog-mode . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-method 'character)
      (highlight-indent-guides-character ?\|))


    (use-package highlight-indentation
      :disabled t
      :ensure t
      :custom
      (highlight-indentation-blank-lines t)
      :hook (prog-mode . highlight-indentation-mode))
  #+end_src

* hippie-expand
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-/") 'hippie-expand)

    ;; (setq hippie-expand-try-functions-list
    ;;       '(try-expand-dabbrev
    ;;         try-expand-dabbrev-all-buffers
    ;;         try-expand-dabbrev-from-kill
    ;;         try-complete-lisp-symbol-partially
    ;;         try-complete-lisp-symbol))
    (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                             try-expand-dabbrev-all-buffers
                                             try-expand-dabbrev-from-kill
                                             try-complete-file-name-partially
                                             try-complete-file-name
                                             try-expand-all-abbrevs
                                             try-expand-list
                                             try-expand-line
                                             try-complete-lisp-symbol-partially
                                             try-complete-lisp-symbol))
  #+end_src

* hydra
  #+begin_src emacs-lisp
    (use-package hydra
      :demand
      :ensure t)
  #+end_src

* COMMENT impatient-mode
#+begin_src emacs-lisp
  (use-package impatient-mode)
#+end_src

* ispell
  #+BEGIN_SRC emacs-lisp
    (cond
     ((executable-find "hunspell")
      (setq ispell-program-name "hunspell")
      (setq ispell-local-dictionary "en_US")
      (setq ispell-local-dictionary-alist
            '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))

     ((executable-find "aspell")
      (setq ispell-program-name "aspell")
      (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
  #+END_SRC

* ivy
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons-ivy
      :disabled
      :custom
      (all-the-icons-spacer "\t")
      :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))


    (use-package all-the-icons-ivy-rich
      :disabled
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1)
      :config
      (setq all-the-icons-ivy-rich-icon-size 1.0)
      )


    ;; (defun counsel-goto-recent-directory ()
    ;;   "Open recent directory with dired"
    ;;   (interactive)
    ;;   (unless recentf-mode (recentf-mode 1))
    ;;   (let ((collection
    ;;   (delete-dups
    ;;    (append (mapcar 'file-name-directory recentf-list)
    ;;            ;; fasd history
    ;;            (if (executable-find "fasd")
    ;;                (split-string (shell-command-to-string "fasd -ld") "\n" t))))))
    ;;     (ivy-read "directories:" collection :action 'dired)))


    (use-package ivy
      :demand t
      :custom
      (ivy-virtual-abbreviate 'abbreviate)
      (ivy-use-virtual-buffers t)
      (ivy-height 10)
      (ivy-count-format "[%d/%d] ")
      :config
      (ivy-configure 'counsel-mark-ring
        :sort-fn #'ignore)
      (ivy-mode 1)
      )

    (use-package swiper
      :ensure t
      :bind ("C-S-s" . swiper))

    (defun counsel-find-file-undo ()
      (interactive)
      (if (string= ivy-text "")
          (when (> (length ivy--directory-hist) 1)
            (let ((dir (progn
                         (pop ivy--directory-hist)
                         (pop ivy--directory-hist))))
              (when dir (ivy--cd dir))))
        (undo)))

    (use-package counsel-projectile)

    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       ("C-c SPC" . counsel-mark-ring)
       ("M-x" . counsel-M-x)
       ("M-s r" . counsel-rg)
       ("M-s g" . counsel-git-grep)
       ("C-x C-f" . counsel-find-file)
       ("C-x d" . counsel-dired)
       ("C-x F" . counsel-buffer-or-recentf)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("<f1> l" . counsel-find-library)
       ("<f2> i" . counsel-info-lookup-symbol)
       ("<f2> u" . counsel-unicode-char)
       ("C-x f" . counsel-projectile-find-file)
       ("C-x F" . counsel-locate)
       (:map ivy-minibuffer-map
             ("M-r" . counsel-minibuffer-history)
             ("C-/" . counsel-find-file-undo)
             ("C-RET" . ivy-immediate-done))
       )
      :custom
      ;; (ivy-initial-inputs-alist nil)
      (counsel-yank-pop-separator "\n----\n")
      (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
      (ivy-use-virtual-buffers t)
      (ivy-on-del-error-function nil)
      (ivy-count-format "[%d/%d] ")
      (ivy-wrap t)
      :config
      (setq ivy-initial-inputs-alist (cons '(org-refile . "") ivy-initial-inputs-alist))
      )

    (use-package ivy-hydra
      :ensure t
      :after hydra
      :config
      (setq ivy-read-action-function #'ivy-hydra-read-action))

    (use-package ivy-rich
      :disabled
      :ensure t
      :after (ivy)
      :init
      (setq ivy-rich-path-style 'relative
            ivy-virtual-abbreviate 'abbreviate)
      :config (ivy-rich-mode 1))
  #+END_SRC

* javascript
  #+begin_src emacs-lisp
  #+end_src

* COMMENT keychord
#+begin_src emacs-lisp
  (setq key-chord-two-keys-delay .015
        key-chord-one-key-delay .020)

  (dolist (binding
           `((" i" . previous-multiframe-window)
             (" o" . next-multiframe-window)
             (" l" . ibuffer)
           
             (" m" . magit)

             (" e" . er/expand-region)
           
             (" q" . quake-mode)
           
             (" 0" . delete-window)
             (" 1" . delete-other-windows)
             (" 2" . split-window-below)
             (" 3" . split-window-right)
             (" =" . winstack-push)
             (" -" . winstack-pop)
           
             (" w" . whitespace-mode)
           
             ("ji" . undo-tree-undo)
             ("jo" . undo-tree-redo)
             ("jk" . undo-tree-switch-branch)
             ("j;" . undo-tree-visualize)
           
             (" b" . ido-switch-buffer)
             (" f" . ido-find-file)
             (" s" . save-buffer)
           
             (" x" . shell)
           
             (" \\". jorbi/toggle-comment)
           
             ("nw" . jabber-display-roster)
             ("ne" . jabber-chat-with)
           
             ("nv" . jorbi/find-init-file)
           
             (" r" . recompile)))
    (key-chord-define jordon-dev-mode-map (car binding) (cdr binding)))
#+end_src
* lisp
  #+BEGIN_SRC emacs-lisp
    (use-package slime
      :ensure t
      :hook lisp-mode
      :config
      (setq inferior-lisp-program "sbcl")
      (load (expand-file-name "~/quicklisp/slime-helper.el"))
      (setq slime-contribs '(slime-fancy)))

    (use-package slime-company
      :ensure t
      :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))


    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
    (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
  #+END_SRC

* lorem
  #+begin_src emacs-lisp
    ;; https://github.com/jschaf/emacs-lorem-ipsum
    (use-package lorem-ipsum
      :disabled)
  #+end_src

* lsp
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure t
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c l")
      (add-hook 'python-mode-hook (lambda () (setq-local lsp-enable-snippet nil)))
      :hook ((Shell-script . lsp-deferred)
             (web-mode . lsp-deferred)
             (js2-mode . lsp-deferred)
             ;; (clojure-mode . lsp-deferred)
             (go-mode . lsp-deferred)
             (python-mode . lsp-deferred)
             (html-mode . lsp-deferred)
             (css-mode . lsp-deferred)
             (rustic-mode . lsp-deferred)
             (c-mode . lsp-deferred)
             (c++-mode . lsp-deferred)
             (lsp-mode . lsp-enable-which-key-integration))
      ;; :custom
      ;; (lsp-auto-configure t)
      ;; (lsp-signature-auto-activate t)
      ;; (lsp-enable-on-type-formatting t)
      ;; (lsp-enable-snippet t)
      ;; (lsp-enable-links t)
      ;; (lsp-signature-doc-lines 3)
      ;; (lsp-idle-delay 0.5)
      ;; (lsp-enable-symbol-highlighting nil)
      ;; (lsp-diagnostics-provider :flycheck)
      :config
      (define-key lsp-signature-mode-map (kbd "M-p") nil)
      (define-key lsp-signature-mode-map (kbd "M-n") nil))

    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)

    (use-package dap-mode
      ;; :disabled
      :ensure t)
    (require 'dap-go)
    (dap-go-setup)
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra)))

    (use-package lsp-ui
      :commands
      lsp-ui-mode
      :hook
      (lsp-mode . lsp-ui-mode)
      :bind
      ("C-c l d" . lsp-ui-doc-show)
      ("C-c l f" . lsp-ui-doc-focus-frame)
      ("C-c l u" . 'lsp-ui-doc-unfocus-frame)
      ;; :custom
      ;; (lsp-ui-doc-enable nil)
      ;; (lsp-ui-peek-fontify 'on-demand)
      ;; (lsp-ui-sideline-delay 0.2)
      ;; (lsp-ui-sideline-enable nil)
      ;; (lsp-ui-sideline-show-hover t)
      ;; (lsp-ui-sideline-show-code-actions t)
      :config
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))


    (use-package ccls
      ;; :disabled
      :defer t
      :hook ((c-mode c++-mode objc-mode) .
             (lambda () (require 'ccls) (lsp)))
      :custom
      (ccls-executable (executable-find "ccls")) ; Add ccls to path if you haven't done so
      (ccls-sem-highlight-method 'font-lock)
      (ccls-enable-skipped-ranges nil)
      :config
      (ccls-use-default-rainbow-sem-highlight)
      )

    (setq ccls-initialization-options
          '(:clang (:extraArgs ["-isystem/usr/local/opt/llvm/bin/../include/c++/v1"
                                "-isystem/usr/local/Cellar/llvm/10.0.0_3/lib/clang/10.0.0/include"
                                "-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include"
                                "-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Framework"]
                               :resourceDir "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0")))
  #+END_SRC

* lua
  #+begin_src emacs-lisp
    (use-package lua-mode
      :mode ("\\.lua\\'" . lua-mode))
  #+end_src

* magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g"   . magit-status)
      :hook (git-commit-mode . flyspell-mode)
      :custom
      (magit-diff-refine-hunk t)
      :config
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
      )
  #+END_SRC

* Minor setting
** show me time
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+END_SRC
* line + column number
  #+BEGIN_SRC emacs-lisp
    ;; ;; Set absolute line numbers.  A value of "relative" is also useful.
    ;; (setq display-line-numbers-type t)
    ;; ;; Those two variables were introduced in Emacs 27.1
    ;; (setq display-line-numbers-major-tick 20)
    ;; (setq display-line-numbers-minor-tick 5)

    ;; ;; Use absolute numbers in narrowed buffers
    ;; (setq display-line-numbers-widen t)

    ;; (use-package nlinum)

    ;; ;; Preset `nlinum-format' for minimum width.
    ;; (defun my-nlinum-mode-hook ()
    ;;   (when nlinum-mode
    ;;     (setq-local nlinum-format
    ;;                 (concat "%" (number-to-string
    ;;                              ;; Guesstimate number of buffer lines.
    ;;                              (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
    ;;                         "d"))))
    ;; (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    ;; (add-hook 'prog-mode-hook 'nlinum-mode)
    (column-number-mode 1)
  #+END_SRC

* multiple-cursors
  #+BEGIN_SRC emacs-lisp
    ;; (defhydra hydra-multiple-cursors (:color blue :hint nil)
    ;;   "
    ;;  Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
    ;; ------------------------------------------------------------------
    ;;  [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
    ;;  [_P_]   Unmark   [_N_]   Unmark   [_s_] Search      [_A_] Insert letters
    ;;  [_M-p_] Skip     [_M-n_] Skip     [_a_] Mark all    [_q_] Quit
    ;;  [Click] Cursor at point       "
    ;;   ("l" mc/edit-lines :exit t)
    ;;   ("a" mc/mark-all-like-this :exit t)
    ;;   ("n" mc/mark-next-like-this)
    ;;   ("M-n" mc/skip-to-next-like-this)
    ;;   ("N" mc/unmark-next-like-this)
    ;;   ("p" mc/mark-previous-like-this)
    ;;   ("M-p" mc/skip-to-previous-like-this)
    ;;   ("P" mc/unmark-previous-like-this)
    ;;   ("s" mc/mark-all-in-region-regexp :exit t)
    ;;   ("0" mc/insert-numbers :exit t)
    ;;   ("A" mc/insert-letters :exit t)
    ;;   ("<mouse-1>" mc/add-cursor-on-click)
    ;;   ;; Help with click recognition in this hydra
    ;;   ("<down-mouse-1>" ignore)
    ;;   ("<drag-mouse-1>" ignore)
    ;;   ("q" nil))


    (use-package
      multiple-cursors
      :ensure t
      :demand t
      :bind
      ("C-c m" . mc/edit-lines)
      ("C-c M" . mc/mark-all-like-this)
      ("C->" . mc/mark-next-like-this)
      ("C-M->" . mc/unmark-next-like-this)
      ("C-<" . mc/mark-previous-like-this)
      ("C-M-<" . mc/unmark-previous-like-this)
      ("C-c C->" . mc/skip-to-next-like-this)
      ("C-c C-<" . mc/skip-to-previous-like-this)
      ("C-S-<mouse-1>" . mc/add-cursor-on-click)
      :config (define-key mc/keymap (kbd "<return>") nil)
      )
  #+END_SRC

* COMMENT Olivitti
#+begin_src emacs-lisp
  (use-package olivetti)
#+end_src

* Org
  #+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Dropbox/org")
    (setq org-default-notes-file "~/Dropbox/org/note.org")
    (setq org-agenda-files '("note.org" "paper.org" "learn.org" "journal.org"))
    (setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
    ;; (setq org-refile-targets '( :maxlevel . 10))
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-use-cache nil)
    (setq org-outline-path-complete-in-steps nil)

    ;; Allow refile to create parent tasks with confirmation
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (add-to-list 'org-modules 'org-habit t)
    (setq org-agenda-repeating-timestamp-show-all t)
    (setq org-habit-show-habits-only-for-today nil)

    (setq org-use-sub-superscripts "{}")

    (use-package org-tree-slide
      :ensure t
      :commands org-tree-slide-mode
      :config
      (org-tree-slide-simple-profile)
      (setq-local beacon-mode -1))

    (use-package org
      :mode (("\\.org$" . org-mode))
      :bind
      ("C-c a" . org-agenda)
      ;; ("C-c l" . org-store-link)
      :custom
      (org-pretty-entities t)
      (org-src-window-setup 'current-window)
      (org-todo-keywords
       '((sequence
          "TODO(t)"
          ;; "PROJECT(p)"
          "SOMEDAY(s)"
          "WAITING(w)"
          "|"
          "CANCELLED(c)"
          "DONE(d)")))
      (org-todo-keyword-faces
       '(
         ("CANCELLED" . "DarkCyan")
         ("SOMEDAY" . "wheat4")
         ("WAITING" . "sienna4")
         ;; ("PROJECT" . "plum4")
         ))
      :config
      (use-package ox-twbs
        :ensure t))

    (use-package org-bullets
        :ensure t
        :commands (org-bullets-mode)
        :init
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    ;; use org-bullets-mode for utf8 symbols as org bullets
    (require 'org-bullets)
    ;; make available "org-bullet-face" such that I can control the font size individually
    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    ;; (setq org-bullets-bullet-list '("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"))

    (use-package org-capture
      :ensure nil
      :bind ("C-c c" . org-capture)
      :config
      (setq org-capture-templates
            '(("d" "Daliy Task" entry (file+datetree "journal.org")
               "* daily tasks [0/3]\n  - [ ] \n  - [ ] \n  - [ ] ")
              ("c" "Journal" entry (file+datetree "journal.org")
               "* %?")
              ;; ("o" "Org Capture" entry (file+headline "note.org" "Inbox")
              ;;  "* TODO %?")
              ;; ("a" "Annotation" entry (file+headline "note.org" "Inbox")
              ;;  "* TODO %?\n  %a")
              ;; ("p" "Paper" entry (file+headline "paper.org" "Inbox")
              ;;  "* %?")
              )))

    ;; (defun org-edit (name)
    ;;   (interactive)
    ;;   (find-file (concat org-directory "/" name)))

    ;; (defun org-edit-note ()
    ;;   (interactive)
    ;;   (org-edit "note.org"))

    ;; (defun org-edit-paper ()
    ;;   (interactive)
    ;;   (org-edit "paper.org"))

    ;; (defun org-edit-journal ()
    ;;   (interactive)
    ;;   (org-edit "journal.org"))

    ;; (defun org-edit-log ()
    ;;   (interactive)
    ;;   (org-edit "log.org"))

    ;; (global-set-key (kbd "C-c o l") 'org-edit-log)
    ;; (global-set-key (kbd "C-c O j") 'org-edit-journal)
    ;; (global-set-key (kbd "C-c O o") 'org-edit-note)
    ;; (global-set-key (kbd "C-c O p") 'org-edit-paper)

    ;; (setq org-publish-project-alist
    ;;       '(("org-notes"
    ;;	 :base-directory "~/org/"
    ;;	 :publishing-directory "~/public_html/"
    ;;	 :publishing-function org-twbs-publish-to-html
    ;;	 :with-sub-superscript nil)))
  #+END_SRC

* Outline-minor-mode/hs-mode
#+begin_src emacs-lisp
  ;; (use-package outline)

  ;; ;; (use-package outline-minor-faces
  ;; ;;   :after outline
  ;; ;;   :config (add-hook 'outline-minor-mode-hook
  ;; ;;		    'outline-minor-faces-add-font-lock-keywords))


  ;; ;; (use-package bicycle
  ;; ;;   :after outline
  ;; ;;   :bind (:map outline-minor-mode-map
  ;; ;;	      ([C-tab] . bicycle-cycle)
  ;; ;;	      ([S-tab] . bicycle-cycle-global)))

  ;; (defvar outline-minor-mode-prefix "\M-#")
  ;; (use-package outshine)


  (use-package prog-mode
    :ensure nil
    :config
    ;; (add-hook 'prog-mode-hook 'outshine-mode)
    (add-hook 'prog-mode-hook 'hs-minor-mode))

  (setq hs-minor-mode-map
	(let ((map (make-sparse-keymap)))
	  ;; These bindings roughly imitate those used by Outline mode.
	  (define-key map (kbd "C-M-{") 'hs-hide-all)
	  (define-key map (kbd "C-M-}") 'hs-show-all)
	  (define-key map (kbd "C-|") 'hs-toggle-hiding)
	  map))

#+end_src

* paredit
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :disabled
      :ensure t
      :config
      (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
      ;; enable in the *scratch* buffer
      (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
      (add-hook 'ielm-mode-hook #'paredit-mode)
      (add-hook 'lisp-mode-hook #'paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode))
  #+END_SRC

* pop kill ring
  #+BEGIN_SRC emacs-lisp
    (use-package popup-kill-ring
      :disabled
      :ensure t
      :bind ("M-y" . popup-kill-ring)
      :custom
      (kill-ring-max 30))
  #+END_SRC

* posframe
  #+begin_src emacs-lisp
    (use-package posframe
      :disabled
      :ensure t)

    (use-package company-posframe
      :disabled
      :demand
      :config
      (company-posframe-mode 1))

    ;; (use-package ivy-posframe
    ;;   ;; :disabled
    ;;   :after ivy
    ;;   :demand t
    ;;   :custom
    ;;   (ivy-posframe-width nil)
    ;;   :config
    ;;   (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    ;;   (ivy-posframe-mode 1))
    ;; (use-package all-the-icons-ivy-rich
    ;;   :ensure t
    ;;   :init (all-the-icons-ivy-rich-mode 1))

    ;; (use-package ivy-rich
    ;;   :ensure t
    ;;   :init (ivy-rich-mode 1))
  #+end_src

* projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :bind-keymap
      ("C-x p" . projectile-command-map)
      :custom
      (projectile-completion-system 'ivy)
      :config
      (projectile-mode t))

    (setq projectile-project-search-path '("~/projects/"))
  #+END_SRC

* python
  #+begin_src emacs-lisp
    (defun python-shell ()
      (interactive)
      (when (get-buffer-process "*Python*")
	(kill-process "*Python*")
	(sleep-for 0.1)
	(kill-buffer "*Python*"))
      (setq name (buffer-name))
      (sleep-for 0.1)
      (run-python)
      (sleep-for 0.1)
      (switch-to-buffer-other-window name))

    ;; (setq kill-whole-line nil)
    (use-package python
      :custom
      (python-indent-guess-indent-offset-verbose nil)
      (python-indent-offset 4)
      (python-indent-guess-indent-offset nil)
      :config
      (local-unset-key (kbd "C-c <"))
      (local-unset-key (kbd "C-c >"))
      (defhydra hydra-pyindent (python-mode-map "C-c")
	"indent"
	("<" python-indent-shift-left "left")
	(">" python-indent-shift-right "right")))

    (use-package python-black
      :ensure t
      :demand t
      :hook (python-mode . python-black-on-save-mode))
  #+end_src

* rainbow
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))
    (use-package rainbow-mode
      ;; :mode "\\.org'"
      ;; :hook (prog-mode . rainbow-mode)
      :commands (rainbow-mode)
      :ensure t)
  #+END_SRC

* Recentf
  #+begin_src emacs-lisp
    (recentf-mode 1)
    (setq recentf-max-menu-items 100)
    (setq recentf-max-saved-items 100)
  #+end_src

* regular expression
  #+begin_src emacs-lisp
    (use-package visual-regexp
      :defer t)

    (use-package visual-regexp-steroids
      :ensure t
      :demand t
      ;; :bind (("C-r" . vr/isearch-backward)
      ;;	 ("C-s" . vr/isearch-forward)
      ;;	 ("C-%" . vr/query-replace)
      ;;	 ("C-M-m" . vr/mc-mark)
      ;;	 )
      )
  #+end_src

* restclient
* Reveal
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :load-path ("lisp/org-reveal")
      :defer 3
      :after org
      :custom
      (org-reveal-note-key-char nil)
      (org-reveal-root "file:///Users/taazadi1/.emacs.d/lisp/reveal.js"))

    (use-package htmlize:
      :disabled
      :ensure t)
  #+END_SRC

* rg
  #+begin_src emacs-lisp
    (use-package rg
      :ensure t
      :bind ("M-s R" . rg))
  #+end_src

* Rust
  #+begin_src emacs-lisp
    ;; The actual Rust-specific stuff:
    (use-package toml-mode
      :ensure t
      :mode ("\\.toml\\'" . toml-mode))

    ;; (use-package rustic
    ;;   :ensure t
    ;;   :mode ("\\.rs" . rustic-mode)
    ;;   ;; disable rustic flycheck error display in modeline. Its redundant
    ;;   ;; (setq rustic-flycheck-setup-mode-line-p nil)
    ;;   :init
    ;;   (add-hook 'rustic-mode-hook #'cargo-minor-mode)
    ;;   :custom
    ;;   (rustic-lsp-server 'rust-analyzer)
    ;;   (rust-indent-method-chain t)
    ;;   (rustic-format-on-save t)
    ;;   ;; :hook ((rustic-mode . (lambda () (company-mode))))
    ;;   :config
    ;;   (provide 'setup-rust))

    ;; (setq lsp-rust-analyzer-server-command '("~/.cargo/bin/rust-analyzer"))


    (use-package rustic
      :mode ("\\.rs" . rustic-mode)
      :custom ((rustic-format-trigger 'on-save)
               (rustic-format-on-save nil)
               (rustic-lsp-format t)
               ;; alt here is 'rust-analyzer and see lsp-rust-analyzer-server-command
               (rustic-lsp-server 'rust-analyzer)

               )
      :init
      ;; (add-hook 'rustic-mode-hook 'my-rust-mode-hook)
      )

  #+end_src

* Scratch
#+begin_src emacs-lisp
  ;;; Scratch buffers on demand
  ;; Package by Ian Eure (ieure on GitHub)
  (use-package scratch
    :ensure
    :config
    (defun prot/scratch-buffer-setup ()
      "Add contents to `scratch' buffer and name it accordingly."
      (let* ((mode (format "%s" major-mode))
	     (string (concat "Scratch buffer for: " mode "\n\n")))
	(when scratch-buffer
	  (save-excursion
	    (insert string)
	    (goto-char (point-min))
	    (comment-region (point-at-bol) (point-at-eol)))
	  (forward-line 2))
	(rename-buffer (concat "*Scratch for " mode "*") t)))
    :hook (scratch-create-buffer-hook . prot/scratch-buffer-setup)
    ;; :bind ("C-c s" . scratch)
)
#+end_src

* shell and term
  #+BEGIN_SRC emacs-lisp
    (setq eshell-prompt-function
          (lambda ()
            (concat
             (propertize "┌─[" 'face `(:foreground "dark cyan"))
             (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "orange"))
             (propertize "]──[" 'face `(:foreground "dark cyan"))
             (propertize (concat (eshell/pwd)) 'face `(:foreground "MediumPurple3"))
             (propertize "]\n" 'face `(:foreground "dark cyan"))
             (propertize "└─>" 'face `(:foreground "dark cyan"))
             ;; (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "dark cyan"))
             (propertize (if (= (user-uid) 0) " # " " $ "))
             )))

    (use-package eshell
      :commands eshell
      ;; :demand t
      :custom
      (eshell-hist-ignoredups t)
      (eshell-save-history-on-exit t)
      (eshell-input-filter 'eshell-input-filter-initial-space)
      :init
      (add-hook 'eshell-first-time-mode-hook
                (lambda ()
                  (define-key eshell-hist-mode-map [remap isearch-backward] 'counsel-esh-history)
                  (define-key eshell-mode-map (kbd "<tab>")  'company-complete)
                  ))
      )

    (defun eshell-new()
      "Open a new instance of eshell."
      (interactive)
      (eshell 'N))

    (global-set-key (kbd "C-c s") 'eshell)
    (global-set-key (kbd "C-c S") 'eshell-new)

#+END_SRC

* single line kill/copy
#+begin_src emacs-lisp
    ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ;; kill line if no region active                                          ;;
    ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; (defadvice kill-region (before slick-cut activate compile)
    ;;   "When called interactively with no active region, kill a single line instead."
    ;;   (interactive
    ;;    (if mark-active
    ;;        (list (region-beginning) (region-end))
    ;;      (list (line-beginning-position) (line-beginning-position 2)))))

    ;; ;; (defun yh/Cw (beg end &optional region)
    ;; ;;   (interactive "p")
    ;; ;;   (message arg)
    ;; ;;   (if mark-active (kill-region beg end &optional region)
    ;; ;;     (crux-kill-whole-line arg)))

    ;; ;; (global-key-binding (kbd "C-w") 'yh/Cw)

    ;; (defadvice kill-ring-save (before slick-cut activate compile)
    ;;   "When called interactively with no active region, copy a single line instead."
    ;;   (interactive
    ;;    (if mark-active
    ;;        (list (region-beginning) (region-end))
    ;;      (progn (message "copy current line")
    ;;	    (list (line-beginning-position) (line-end-position))))))

    ;; (defun yh/whole-line-or-region-kill-ring-save (prefix)
    ;;   "Copy region or PREFIX whole lines."
    ;;   (interactive "p")
    ;;   (if (not mark-active) (message "save current line"))
    ;;   (whole-line-or-region-call-with-region 'kill-ring-save prefix t))

    ;;  (defun yh/whole-line-or-region-sp-kill-region (prefix)
    ;;       "Kill region or PREFIX whole lines."
    ;;       (interactive "*p")
    ;;       (whole-line-or-region-call-with-region 'sp-kill-region prefix t))

    (use-package whole-line-or-region
      ;; :bind
      ;; (:map
      ;;  whole-line-or-region-local-mode-map
      ;;  ("M-w" . 'yh/whole-line-or-region-kill-ring-save))

  )

    (whole-line-or-region-global-mode)

#+end_src

* skewer
#+begin_src emacs-lisp
  (use-package skewer-mode
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'web-mode-hook 'skewer-html-mode))
#+end_src


* smartparens
#+begin_src emacs-lisp
  (defun yh/sp-copy-sexp ()
    (interactive)
    (message "copy sexp")
    (sp-copy-sexp))

  (defun current-line-empty-p ()
    (string-match-p "\\`\\s-*$" (thing-at-point 'line)))

  (defun yh/sp-kill-region ()
    (interactive)
    (if (region-active-p)
        (sp-kill-region (region-beginning) (region-end))
      (if (current-line-empty-p)
          (kill-whole-line)
        (message "No active region or empty line"))))


  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    (inferior-python-mode . smartparens-mode)
    (clojure-mode . smartparens-strict-mode)
    (cider-repl-mode . smartparens-strict-mode)
    (emacs-lisp-mode . smartparens-strict-mode)
    :custom
    (sp-highlight-pair-overlay nil)
    (sp-hybrid-kill-excessive-whitespace t)
    :config
    (require 'smartparens-config)
    (sp-use-paredit-bindings)
    (unbind-key "M-?" smartparens-mode-map)
    :bind
    ;; ("C-c p s" . smartparens-strict-mode)
    ;; ("C-c p r" . sp-rewrap-sexp)
    ("M-W" . yh/sp-copy-sexp)
    (:map smartparens-strict-mode-map
          ("C-k" . 'sp-kill-hybrid-sexp)
          ("C-w" . 'yh/whole-line-or-region-sp-kill-region)
          ("C-<backspace>" . 'sp-backward-kill-sexp))
    ;; (:map smartparens-mode-map
    ;;       ("C-c p c" . 'sp-convolute-sexp))
    )

  (setq kill-whole-line t)
  ;; (smartparens-global-mode)
  (show-paren-mode)

#+end_src

* switch-window
#+BEGIN_SRC emacs-lisp
  (global-set-key [s-left] 'windmove-left)          ; move to left window
  (global-set-key [s-right] 'windmove-right)        ; move to right window
  (global-set-key [s-up] 'windmove-up)              ; move to upper window
  (global-set-key [s-down] 'windmove-down)          ; move to lower window

  (global-set-key (kbd "s-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-S-<down>") 'shrink-window)
  (global-set-key (kbd "s-S-<up>") 'enlarge-window)


  ;; (global-set-key (kbd "s-j") 'windmove-left)          ; move to left window
  ;; (global-set-key (kbd "s-l") 'windmove-right)        ; move to right window
  ;; (global-set-key (kbd "s-i") 'windmove-up)              ; move to upper window
  ;; (global-set-key (kbd "s-k") 'windmove-down)          ; move to lower window

  ;; (global-set-key (kbd "s-J") 'shrink-window-horizontally)
  ;; (global-set-key (kbd "s-L") 'enlarge-window-horizontally)
  ;; (global-set-key (kbd "s-K") 'shrink-window)
  ;; (global-set-key (kbd "s-J") 'enlarge-window)
#+END_SRC

* Tramp
#+begin_src emacs-lisp
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-ignore-dir-regexp
        (format "%s\\|%s"
                      vc-ignore-dir-regexp
                      tramp-file-name-regexp))
  (setq tramp-verbose 1)
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))
#+end_src

* Treemacs/neotree
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    ;; :init
    ;; (with-eval-after-load 'winum
    ;;   (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t a"   . treemacs-add-project-to-workspace)
          ("C-x t A"   . treemacs-add-and-display-current-project)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src

* Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer t
    :ensure t)
#+END_SRC

* Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :demand t
    :custom
    (undo-tree-visualizer-diff nil)
    (undo-tree-visualizer-timestamps nil)
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    :config
    (global-undo-tree-mode)
    )
#+END_SRC

* UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

  (global-set-key [s-left] 'windmove-left)          ; move to left window
  (global-set-key [s-right] 'windmove-right)        ; move to right window
  (global-set-key [s-up] 'windmove-up)              ; move to upper window
  (global-set-key [s-down] 'windmove-down)          ; move to lower window

    (global-set-key (kbd "s-S-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "s-S-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "s-S-<down>") 'shrink-window)
    (global-set-key (kbd "s-S-<up>") 'enlarge-window)


  ;; (global-set-key (kbd "s-j") 'windmove-left)          ; move to left window
  ;; (global-set-key (kbd "s-l") 'windmove-right)        ; move to right window
  ;; (global-set-key (kbd "s-i") 'windmove-up)              ; move to upper window
  ;; (global-set-key (kbd "s-k") 'windmove-down)          ; move to lower window

  ;; (global-set-key (kbd "s-J") 'shrink-window-horizontally)
  ;; (global-set-key (kbd "s-L") 'enlarge-window-horizontally)
  ;; (global-set-key (kbd "s-K") 'shrink-window)
  ;; (global-set-key (kbd "s-J") 'enlarge-window)
* Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure
    :commands vterm
    :config
    (setq vterm-disable-bold-font nil)
    (setq vterm-disable-inverse-video nil)
    (setq vterm-disable-underline nil)
    (setq vterm-kill-buffer-on-exit nil)
    (setq vterm-max-scrollback 9999)
    (setq vterm-shell "/bin/zsh")
    (setq vterm-term-environment-variable "xterm-256color")
    :bind
    ("C-c t" . vterm)
    (:map vterm-mode-map
          ([remap whole-line-or-region-yank] . vterm-yank)) 
    )


  (defun yh/vterm-insert-string ()
      (interactive)
    (vterm-send-string (read-from-minibuffer "What do you want do send? ")))
#+end_src

* web-mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :demand t
    :mode "\\.js\\'")

  (use-package tide
    :ensure t
    :custom
    (tide-completion-ignore-case t)
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (setq tide-hl-identifier-mode nil)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    ;; (company-mode +1)
    )

  (add-hook 'js2-mode-hook #'setup-tide-mode)
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  ;; (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

  (use-package web-mode
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.jsp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.jst.ejs\\'" . web-mode)
     ("\\.html?\\'" . web-mode))
    :custom
    ;; (web-mode-enable-block-face t)
    (web-mode-enable-current-element-highlight nil)
    (web-mode-enable-current-column-highlight nil)
    (web-mode-script-padding 2)
    (web-mode-style-padding 2)
    (web-mode-comment-style 1)
    (web-mode-enable-auto-quoting nil)
    (web-mode-code-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2))
#+end_src

* which key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 4
    :ensure t
    :config
    (which-key-mode))
#+end_src

* Winner
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :if (not noninteractive)
    :bind
    ("M-s-<left>" . winner-undo)
    ("M-s-<right>" . winner-redo)
    :defer 2
    :config
    (winner-mode 1)
    )
#+END_SRC

* yaml mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :bind ("C-<tab>" . yas-expand)
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (define-key yas-minor-mode-map [(tab)] nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    ;; (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC

* YouDao
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :ensure t
    :bind
    ("C-c y" . 'youdao-dictionary-search-at-point)
    ("C-c Y" . 'youdao-dictionary-search))
#+END_SRC


